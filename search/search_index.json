{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Aqua Documentation \u00b6 You have reached the official Aqua documentation site! The following projects and features are documented here: Seaworld, the Aqua app (for users) Gridless, the Aqua server (for contributors) Client API Bot API","title":"Aqua Documentation"},{"location":"#aqua_documentation","text":"You have reached the official Aqua documentation site! The following projects and features are documented here: Seaworld, the Aqua app (for users) Gridless, the Aqua server (for contributors) Client API Bot API","title":"Aqua Documentation"},{"location":"contributing/change-what/","text":"What Needs Changing? \u00b6 For various taxonomies, adding new fields will require adding them in several places. Improvements on the following features may require modifications in these places. If you're looking for details on various taxonomies, such as what Flows are, perhaps the Taxonomy page is worth a look. Flows \u00b6 To change the fields on Flows, you may need to change the fields in the following places: The TypeScript interface in src/db/models/flowModel.ts The MongoDB Schema object in src/db/models/flowModel.ts If the MongoDB field is not the same as the GraphQL field, the GraphQL resolver in src/flows/resolver.ts The GraphQL schema in src/graphql/schemas/flow.graphql Content \u00b6 To change the fields on Content, you may need to change the fields in the following places: The TypeScript interface in src/db/models/contentModel.ts The MongoDB Schema object in src/db/models/contentModel.ts If the MongoDB field is not the same as the GraphQL field, the GraphQL resolver in src/content/resolver.ts The GraphQL schema in src/graphql/schemas/content.graphql Scopes \u00b6 To add or remove a scope, used for apps, you will need to change the following: The scope's user-facing appearance in src/auth/scopeStrings.json The Scopes enumeration in src/auth/UserModel.ts","title":"What to Change"},{"location":"contributing/change-what/#what_needs_changing","text":"For various taxonomies, adding new fields will require adding them in several places. Improvements on the following features may require modifications in these places. If you're looking for details on various taxonomies, such as what Flows are, perhaps the Taxonomy page is worth a look.","title":"What Needs Changing?"},{"location":"contributing/change-what/#flows","text":"To change the fields on Flows, you may need to change the fields in the following places: The TypeScript interface in src/db/models/flowModel.ts The MongoDB Schema object in src/db/models/flowModel.ts If the MongoDB field is not the same as the GraphQL field, the GraphQL resolver in src/flows/resolver.ts The GraphQL schema in src/graphql/schemas/flow.graphql","title":"Flows"},{"location":"contributing/change-what/#content","text":"To change the fields on Content, you may need to change the fields in the following places: The TypeScript interface in src/db/models/contentModel.ts The MongoDB Schema object in src/db/models/contentModel.ts If the MongoDB field is not the same as the GraphQL field, the GraphQL resolver in src/content/resolver.ts The GraphQL schema in src/graphql/schemas/content.graphql","title":"Content"},{"location":"contributing/change-what/#scopes","text":"To add or remove a scope, used for apps, you will need to change the following: The scope's user-facing appearance in src/auth/scopeStrings.json The Scopes enumeration in src/auth/UserModel.ts","title":"Scopes"},{"location":"guides/clientdev/authorization/","text":"Authorize Clients \u00b6 This document will guide you to create an application in the developer panel and use it to authenticate a client. Prerequisites \u00b6 A Gridless server to use, such as Aqua at example.org . You must be logged in to create applications. If you are not, Gridless will prompt you to log in. Create an Application \u00b6 At your Gridless server, open your browser to /_gridless/developers . (If you're using example.org , browse to https://example.org/_gridless/developers .) Click the \"New\" button in the top-right corner. Input your client's name and select \"Client\" as the type. Bots are not yet supported. Click \"Create\" to create your app. Click on the app on the left side of your screen to see its information. This is where your client ID can be found. Authorization Code Method \u00b6 Using your application's client ID from the developer panel at /_gridless/developers , make a POST request from your client app with the following format: /_gridless/authorize?client_id=AQUA-CLIENTID&scopes=SCOPES&response_type=code If it succeeds, it should return a JSON object, containing your authentication code as the value of code . * Scopes are comma-separated, no spaces. The scopes you can use are documented in Scopes . Send the user to a browser with the URL: /_gridless/authorize?client_id=AQUA-CLIENTID&code=AUTHCODE&grant_type=code If the user accepts the authorization, it should tell them to return to the app. From your client, make a POST request: /_gridless/claimtoken?client_id=AQUA-CLIENTID&code=AUTHCODE If it succeeds, it should return a JSON object with your token as the value of token . Errors \u00b6 When performing the claimtoken step, you may encounter the following errors: Client ID does not exist. APPNAMEHERE is a bot. Bot authorization is not supported yet. No authorization code given. (A JWT error. I didn't program these so I don't know them.) A user is not currently authorizing this app -- This may happen when a user denies your request. Or you formatted it wrong.","title":"Authorization"},{"location":"guides/clientdev/authorization/#authorize_clients","text":"This document will guide you to create an application in the developer panel and use it to authenticate a client.","title":"Authorize Clients"},{"location":"guides/clientdev/authorization/#prerequisites","text":"A Gridless server to use, such as Aqua at example.org . You must be logged in to create applications. If you are not, Gridless will prompt you to log in.","title":"Prerequisites"},{"location":"guides/clientdev/authorization/#create_an_application","text":"At your Gridless server, open your browser to /_gridless/developers . (If you're using example.org , browse to https://example.org/_gridless/developers .) Click the \"New\" button in the top-right corner. Input your client's name and select \"Client\" as the type. Bots are not yet supported. Click \"Create\" to create your app. Click on the app on the left side of your screen to see its information. This is where your client ID can be found.","title":"Create an Application"},{"location":"guides/clientdev/authorization/#authorization_code_method","text":"Using your application's client ID from the developer panel at /_gridless/developers , make a POST request from your client app with the following format: /_gridless/authorize?client_id=AQUA-CLIENTID&scopes=SCOPES&response_type=code If it succeeds, it should return a JSON object, containing your authentication code as the value of code . * Scopes are comma-separated, no spaces. The scopes you can use are documented in Scopes . Send the user to a browser with the URL: /_gridless/authorize?client_id=AQUA-CLIENTID&code=AUTHCODE&grant_type=code If the user accepts the authorization, it should tell them to return to the app. From your client, make a POST request: /_gridless/claimtoken?client_id=AQUA-CLIENTID&code=AUTHCODE If it succeeds, it should return a JSON object with your token as the value of token .","title":"Authorization Code Method"},{"location":"guides/clientdev/authorization/#errors","text":"When performing the claimtoken step, you may encounter the following errors: Client ID does not exist. APPNAMEHERE is a bot. Bot authorization is not supported yet. No authorization code given. (A JWT error. I didn't program these so I don't know them.) A user is not currently authorizing this app -- This may happen when a user denies your request. Or you formatted it wrong.","title":"Errors"},{"location":"guides/gridless/starting-gridless/","text":"Starting Gridless \u00b6 The following steps will start the Gridless server in development mode. A \"release mode\" has not been set up yet. Prerequisites \u00b6 A MongoDB server. For testing/development purposes, a local one using Docker should work. Procedure \u00b6 Clone the repository. You should have already done that. git clone https://github.com/getaqua/gridless --depth=1 --branch=main cd gridless Create config.yaml. Use the contents of config.yaml.example as your guide, and fill it in as necessary. Run DEBUG=gridless:* yarn dev . Wait for Gridless to tell you it's ready before doing anything; it shouldn't take too long. * If the server does not tell you that the database is connected after about 30 seconds, your database is not set up or configured correctly. Make sure your MongoDB instance is up and running, and that you've set up both it and Gridless with the correct information.","title":"Starting Gridless"},{"location":"guides/gridless/starting-gridless/#starting_gridless","text":"The following steps will start the Gridless server in development mode. A \"release mode\" has not been set up yet.","title":"Starting Gridless"},{"location":"guides/gridless/starting-gridless/#prerequisites","text":"A MongoDB server. For testing/development purposes, a local one using Docker should work.","title":"Prerequisites"},{"location":"guides/gridless/starting-gridless/#procedure","text":"Clone the repository. You should have already done that. git clone https://github.com/getaqua/gridless --depth=1 --branch=main cd gridless Create config.yaml. Use the contents of config.yaml.example as your guide, and fill it in as necessary. Run DEBUG=gridless:* yarn dev . Wait for Gridless to tell you it's ready before doing anything; it shouldn't take too long. * If the server does not tell you that the database is connected after about 30 seconds, your database is not set up or configured correctly. Make sure your MongoDB instance is up and running, and that you've set up both it and Gridless with the correct information.","title":"Procedure"},{"location":"reference/gridless/errors/","text":"Error Handling \u00b6 You may need to handle the following error conditions when using the API. GraphQL API \u00b6 GraphQL error codes can be found under objects in errors in the extensions.code field. GRAPHQL_PARSE_FAILED This is a client developer error. The query has a syntax error or is otherwise invalid. GRAPHQL_VALIDATION_FAILED This is a client developer error. The query does not match the server's schema. This means you are trying to access a field which does not exist. BAD_USER_INPUT This is likely a client developer error. You have given a field invalid input. This data may come from your user but is likely validated against a pattern, such as ISO-8601 for Date types, and the formatting is invalid. These patterns should not be sent directly by the user; instead, the client application should take user input to fill out the format for the field. OUT_OF_SCOPE This is a client developer error. You did not request a scope for something you are trying to use, or you are using a feature you did not intend to use. The user may have permission to perform this action but the application does not. PERMISSION_DENIED The user or bot does not have access to the resource it was trying to interact with. This could mean that you don't have view or read permission on a Flow when trying to access it, or that you do not have post when trying to post new Content. null returned where a value is expected This usually means that a resource you were looking for is private or unavailable, or an error was thrown on that value.","title":"Errors"},{"location":"reference/gridless/errors/#error_handling","text":"You may need to handle the following error conditions when using the API.","title":"Error Handling"},{"location":"reference/gridless/errors/#graphql_api","text":"GraphQL error codes can be found under objects in errors in the extensions.code field. GRAPHQL_PARSE_FAILED This is a client developer error. The query has a syntax error or is otherwise invalid. GRAPHQL_VALIDATION_FAILED This is a client developer error. The query does not match the server's schema. This means you are trying to access a field which does not exist. BAD_USER_INPUT This is likely a client developer error. You have given a field invalid input. This data may come from your user but is likely validated against a pattern, such as ISO-8601 for Date types, and the formatting is invalid. These patterns should not be sent directly by the user; instead, the client application should take user input to fill out the format for the field. OUT_OF_SCOPE This is a client developer error. You did not request a scope for something you are trying to use, or you are using a feature you did not intend to use. The user may have permission to perform this action but the application does not. PERMISSION_DENIED The user or bot does not have access to the resource it was trying to interact with. This could mean that you don't have view or read permission on a Flow when trying to access it, or that you do not have post when trying to post new Content. null returned where a value is expected This usually means that a resource you were looking for is private or unavailable, or an error was thrown on that value.","title":"GraphQL API"},{"location":"reference/gridless/permissions/","text":"Permissions \u00b6 Flow Permissions \u00b6 Permission Description Applies to endpoints view View profile information for the Flow 1 getFlow read Read Content in the Flow getFlow.content post Post Content to the Flow postContent join Join the Flow. This permission can also have a value of \"REQUEST\" . 2 joinFlow delete Delete Content in the Flow deleteContent for content the user did not post pin Pin Content to the top of the Flow pinContent update Change the profile, features, and settings of the Flow updateFlow Permission values \u00b6 \"ALLOW\" \"DENY\" \"REQUEST\" -- used on the join permission When set to \"DENY\" on public_permissions , the Flow is considered \"private\". Attempts to query a private Flow will result in a not-found condition (the query will silently return null). \u21a9 The \"REQUEST\" permission value allows the user to request to join the Flow. The join permission has no effect outside of the Flow's public_permissions . \u21a9","title":"Permissions"},{"location":"reference/gridless/permissions/#permissions","text":"","title":"Permissions"},{"location":"reference/gridless/permissions/#flow_permissions","text":"Permission Description Applies to endpoints view View profile information for the Flow 1 getFlow read Read Content in the Flow getFlow.content post Post Content to the Flow postContent join Join the Flow. This permission can also have a value of \"REQUEST\" . 2 joinFlow delete Delete Content in the Flow deleteContent for content the user did not post pin Pin Content to the top of the Flow pinContent update Change the profile, features, and settings of the Flow updateFlow","title":"Flow Permissions"},{"location":"reference/gridless/permissions/#permission_values","text":"\"ALLOW\" \"DENY\" \"REQUEST\" -- used on the join permission When set to \"DENY\" on public_permissions , the Flow is considered \"private\". Attempts to query a private Flow will result in a not-found condition (the query will silently return null). \u21a9 The \"REQUEST\" permission value allows the user to request to join the Flow. The join permission has no effect outside of the Flow's public_permissions . \u21a9","title":"Permission values"},{"location":"reference/gridless/scopes/","text":"Scopes \u00b6 Scope Display Name Required for endpoints user.read Use your email address and phone number None yet flow.new Create Flows on your behalf createFlow flow.list Discover your public and private Flows None yet flow.join Join Flows for you joinFlow flow.view.private View your private Flows it already knows about getFlow on private Flows flow.read.public Read and respond to Content in public Flows as you getFlow.content on public Flows flow.read.private Read and respond to Content in private Flows as you getFlow.content on private Flows user.addbot Link bots to your account None yet flow.content.post Post Content to your Flows postContent flow.content.manage Pin, edit, and delete Content in your Flows deleteContent flow.update Change settings in your Flows updateFlow flow.delete Delete your Flows deleteFlow user.impersonate Post as you to your Profile and Flows None yet","title":"Scopes"},{"location":"reference/gridless/scopes/#scopes","text":"Scope Display Name Required for endpoints user.read Use your email address and phone number None yet flow.new Create Flows on your behalf createFlow flow.list Discover your public and private Flows None yet flow.join Join Flows for you joinFlow flow.view.private View your private Flows it already knows about getFlow on private Flows flow.read.public Read and respond to Content in public Flows as you getFlow.content on public Flows flow.read.private Read and respond to Content in private Flows as you getFlow.content on private Flows user.addbot Link bots to your account None yet flow.content.post Post Content to your Flows postContent flow.content.manage Pin, edit, and delete Content in your Flows deleteContent flow.update Change settings in your Flows updateFlow flow.delete Delete your Flows deleteFlow user.impersonate Post as you to your Profile and Flows None yet","title":"Scopes"},{"location":"reference/gridless-api/","text":"Gridless API \u00b6 The Gridless API is the main GraphQL API which Gridless provides to clients, such as Seaworld and other apps. The API can be categorized into multiple main groups, which we have done for these docs, because humans are built to categorize things. Flows : including users, communities, and the following and joining mechanics. Content : posts that users make in Flows. Chat : including chatrooms and messages. GraphQL Endpoints \u00b6 Check the Logged-In User \u00b6 QUERY getMe This endpoint allows you to check the scopes on your token and get the user's Flow. Returns: ThisUser (exclusive response type) Key Type Description :warning: user User This field is essentially a partial Flow, so it's best to just use flow instead. This field is set to be removed very soon. flow Flow The user's Flow. Use this to get the user's ID, name, and profile picture. username String The user's username, which is used for login. :material-info-outline: verifiedEmail Boolean Whether the user has verified their email address. true by default. NOTE: the field is likely to be renamed to verified_email and it also doesn't work yet. :material-info-outline: tokenPermissions List of Strings The list of scopes your application was granted. NOTE: this field is likely to be renamed to scopes .","title":"Gridless API"},{"location":"reference/gridless-api/#gridless_api","text":"The Gridless API is the main GraphQL API which Gridless provides to clients, such as Seaworld and other apps. The API can be categorized into multiple main groups, which we have done for these docs, because humans are built to categorize things. Flows : including users, communities, and the following and joining mechanics. Content : posts that users make in Flows. Chat : including chatrooms and messages.","title":"Gridless API"},{"location":"reference/gridless-api/#graphql_endpoints","text":"","title":"GraphQL Endpoints"},{"location":"reference/gridless-api/#check_the_logged-in_user","text":"QUERY getMe This endpoint allows you to check the scopes on your token and get the user's Flow. Returns: ThisUser (exclusive response type) Key Type Description :warning: user User This field is essentially a partial Flow, so it's best to just use flow instead. This field is set to be removed very soon. flow Flow The user's Flow. Use this to get the user's ID, name, and profile picture. username String The user's username, which is used for login. :material-info-outline: verifiedEmail Boolean Whether the user has verified their email address. true by default. NOTE: the field is likely to be renamed to verified_email and it also doesn't work yet. :material-info-outline: tokenPermissions List of Strings The list of scopes your application was granted. NOTE: this field is likely to be renamed to scopes .","title":"Check the Logged-In User"},{"location":"reference/gridless-api/flows/","text":"Flows in the Client API \u00b6 GraphQL Endpoints \u00b6 Get Flow by ID \u00b6 QUERY getFlow ( id : String ! ) Variables Key Value id The ID (//example) or snowflake of the Flow you want to look up. Returns: Flow ; null if private or not found Types \u00b6 Flow \u00b6 Key Type Description id String The Flow's user-friendly ID. It usually begins with // to denote that it's an Aqua Flowcode. snowflake Snowflake The Flow's internal ID, which does not change. name String The display name of the Flow. Gridless will return the ID without the leading slashes if no name is set. avatar_url URL (String) banner_url URL (String) tagline String or null 64 characters or less description String or null A bio, \"about me\", or description. alternative_ids List of Strings Includes the snowflake and any Fediverse/Matrix user IDs public_permissions FlowPermissions Users who are not a member of the Flow will always have these permissions, even if they still have overrides. joined_permissions FlowPermissions Users who have joined the Flow have these permissions by default. member_permissions Dict of Strings to FlowPermissions To be deprecated/changed. owner Flow with only id , or null The root owner of this Flow. If null, you don't have access to read this field, or it is a user flow. Don't expect this field to stick around. parent Flow or null The parent of this Flow. If null, the parent is private, or this flow is a user flow. members \u00b6 Arguments | Key | Type | Description | |-----|------|-------------| | limit | Integer | The number of members to limit the list to. | Returns: List of Flows (Honestly, I have no clue WHICH members are returned from this.) content \u00b6 Arguments | Key | Type | Description | |-----|------|-------------| | limit | Integer | The number of posts to return. | Returns: List of Content (It should return the most recent Content.)","title":"Flows"},{"location":"reference/gridless-api/flows/#flows_in_the_client_api","text":"","title":"Flows in the Client API"},{"location":"reference/gridless-api/flows/#graphql_endpoints","text":"","title":"GraphQL Endpoints"},{"location":"reference/gridless-api/flows/#get_flow_by_id","text":"QUERY getFlow ( id : String ! ) Variables Key Value id The ID (//example) or snowflake of the Flow you want to look up. Returns: Flow ; null if private or not found","title":"Get Flow by ID"},{"location":"reference/gridless-api/flows/#types","text":"","title":"Types"},{"location":"reference/gridless-api/flows/#flow","text":"Key Type Description id String The Flow's user-friendly ID. It usually begins with // to denote that it's an Aqua Flowcode. snowflake Snowflake The Flow's internal ID, which does not change. name String The display name of the Flow. Gridless will return the ID without the leading slashes if no name is set. avatar_url URL (String) banner_url URL (String) tagline String or null 64 characters or less description String or null A bio, \"about me\", or description. alternative_ids List of Strings Includes the snowflake and any Fediverse/Matrix user IDs public_permissions FlowPermissions Users who are not a member of the Flow will always have these permissions, even if they still have overrides. joined_permissions FlowPermissions Users who have joined the Flow have these permissions by default. member_permissions Dict of Strings to FlowPermissions To be deprecated/changed. owner Flow with only id , or null The root owner of this Flow. If null, you don't have access to read this field, or it is a user flow. Don't expect this field to stick around. parent Flow or null The parent of this Flow. If null, the parent is private, or this flow is a user flow.","title":"Flow"},{"location":"reference/gridless-api/flows/#members","text":"Arguments | Key | Type | Description | |-----|------|-------------| | limit | Integer | The number of members to limit the list to. | Returns: List of Flows (Honestly, I have no clue WHICH members are returned from this.)","title":"members"},{"location":"reference/gridless-api/flows/#content","text":"Arguments | Key | Type | Description | |-----|------|-------------| | limit | Integer | The number of posts to return. | Returns: List of Content (It should return the most recent Content.)","title":"content"}]}